#!/usr/bin/env python
"""
# *****************************************************************
# (C) Copyright IBM Corp. 2020, 2021. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# *****************************************************************
"""

import sys
import inputs
from errors import OpenCEError
import build_env
import build_feedstock
import test_feedstock
import test_env
import validate_config
import validate_env
import build_image
import get_licenses

#pylint: disable=too-many-locals
def make_parser():
    ''' Parser for input arguments '''
    parser = inputs.make_parser([], description = 'Open-CE Tool')

    subparsers = parser.add_subparsers(title='Open-CE Commands',
                                       description='Choose from the following commands to perform.')
    subparsers.required = True
    subparsers.dest = 'command'

    build_parser = inputs.add_subparser(subparsers, 'build', [], help="Build a feedstock, an image, or an environment.")
    build_sub_parsers = build_parser.add_subparsers(title='Build Commands',
                                                    description='Valid Commands')
    build_sub_parsers.required = True
    build_sub_parsers.dest = 'sub_command'

    build_env_parser = inputs.add_subparser(build_sub_parsers,
                                            build_env.COMMAND,
                                            build_env.ARGUMENTS,
                                            help=build_env.DESCRIPTION)
    build_env_parser.set_defaults(func=build_env.ENTRY_FUNCTION)

    build_feedstock_parser = inputs.add_subparser(build_sub_parsers,
                                                  build_feedstock.COMMAND,
                                                  build_feedstock.ARGUMENTS,
                                                  help=build_feedstock.DESCRIPTION)
    build_feedstock_parser.set_defaults(func=build_feedstock.ENTRY_FUNCTION)

    build_image_parser = inputs.add_subparser(build_sub_parsers,
                                              build_image.COMMAND,
                                              build_image.ARGUMENTS,
                                              help=build_image.DESCRIPTION)
    build_image_parser.set_defaults(func=build_image.ENTRY_FUNCTION)

    test_parser = inputs.add_subparser(subparsers, 'test', [], help="Run tests within a feedstock.")
    test_sub_parsers = test_parser.add_subparsers(title='Test Commands',
                                                  description='Valid Commands')
    test_sub_parsers.required = True
    test_sub_parsers.dest = 'sub_command'


    test_feedstock_parser = inputs.add_subparser(test_sub_parsers,
                                                 test_feedstock.COMMAND,
                                                 test_feedstock.ARGUMENTS,
                                                 help=test_feedstock.DESCRIPTION)
    test_feedstock_parser.set_defaults(func=test_feedstock.ENTRY_FUNCTION)

    test_env_parser = inputs.add_subparser(test_sub_parsers,
                                           test_env.COMMAND,
                                           test_env.ARGUMENTS,
                                           help=test_env.DESCRIPTION)
    test_env_parser.set_defaults(func=test_env.ENTRY_FUNCTION)

    validate_parser = inputs.add_subparser(subparsers, 'validate', [],
                                           help="Validate an env file or a conda_build_config file.")
    validate_sub_parsers = validate_parser.add_subparsers(title='Validate Commands',
                                                          description='Valid Commands')
    validate_sub_parsers.required = True
    validate_sub_parsers.dest = 'sub_command'

    validate_config_parser = inputs.add_subparser(validate_sub_parsers,
                                                  validate_config.COMMAND,
                                                  validate_config.ARGUMENTS,
                                                  help=validate_config.DESCRIPTION)
    validate_config_parser.set_defaults(func=validate_config.ENTRY_FUNCTION)

    validate_env_parser = inputs.add_subparser(validate_sub_parsers,
                                               validate_env.COMMAND,
                                               validate_env.ARGUMENTS,
                                               help=validate_env.DESCRIPTION)
    validate_env_parser.set_defaults(func=validate_env.ENTRY_FUNCTION)

    get_parser = inputs.add_subparser(subparsers, 'get', [],
                                      help="Get information about Open-CE builds.")
    get_sub_parsers = get_parser.add_subparsers(title='Get Commands',
                                                description='Valid Commands')
    get_sub_parsers.required = True
    get_sub_parsers.dest = 'sub_command'

    get_licenses_parser = inputs.add_subparser(get_sub_parsers,
                                               get_licenses.COMMAND,
                                               get_licenses.ARGUMENTS,
                                               help=get_licenses.DESCRIPTION)
    get_licenses_parser.set_defaults(func=get_licenses.ENTRY_FUNCTION)

    return parser

def _main(arg_strings=None):
    parser = make_parser()
    if len(sys.argv) == 1:
        parser.print_help()
        return
    args = inputs.parse_args(parser, arg_strings)
    args.func(args)

if __name__ == '__main__':
    try:
        _main()
    except OpenCEError as err:
        print(err.msg, file=sys.stderr)
        sys.exit(1)

    sys.exit(0)
