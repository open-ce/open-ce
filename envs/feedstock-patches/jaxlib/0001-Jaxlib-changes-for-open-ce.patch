From f74a255668dcdff09675a3a3231abeef131e8c8f Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Thu, 20 Apr 2023 06:52:00 +0000
Subject: [PATCH] Jaxlib changes for open-ce

---
 recipe/build.sh                               |   2 +
 recipe/conda_build_config.yaml                |   5 +
 recipe/meta.yaml                              |  32 +--
 .../0003-Patched-openxla-for-tf_runtime.patch | 196 ++++++++++++++++++
 4 files changed, 220 insertions(+), 15 deletions(-)
 create mode 100644 recipe/patches/0003-Patched-openxla-for-tf_runtime.patch

diff --git a/recipe/build.sh b/recipe/build.sh
index f62d09b..7a554b2 100644
--- a/recipe/build.sh
+++ b/recipe/build.sh
@@ -19,6 +19,8 @@ build --toolchain_resolution_debug
 build --define=PREFIX=${PREFIX}
 build --define=PROTOBUF_INCLUDE_PATH=${PREFIX}/include
 build --local_cpu_resources=${CPU_COUNT}"
+build --copt="-fplt"
+build --cxxopt="-fplt"
 EOF
 
 if [[ "${target_platform}" == "osx-arm64" ]]; then
diff --git a/recipe/conda_build_config.yaml b/recipe/conda_build_config.yaml
index a28f017..871eeca 100644
--- a/recipe/conda_build_config.yaml
+++ b/recipe/conda_build_config.yaml
@@ -2,3 +2,8 @@ MACOSX_SDK_VERSION:        # [osx and x86_64]
   - "10.14"                # [osx and x86_64]
 MACOSX_DEPLOYMENT_TARGET:  # [osx and x86_64]
   - "10.14"                # [osx and x86_64]
+cuda_compiler_version:
+  - "None"                   # [build_type == 'cpu']
+  - "11.2"                   # [cudatoolkit == '11.2']
+  - "11.8"                   # [cudatoolkit == '11.8']
+
diff --git a/recipe/meta.yaml b/recipe/meta.yaml
index 09aac1d..e91a49a 100644
--- a/recipe/meta.yaml
+++ b/recipe/meta.yaml
@@ -17,6 +17,7 @@ source:
   patches:
     - patches/0001-custom-build.diff
     - patches/0002-bazelrc-edit.diff  # [cuda_compiler_version == "11.2"]
+    - patches/0003-Patched-openxla-for-tf_runtime.patch      #[s390x]
 
 build:
   number: {{ number }}
@@ -30,39 +31,40 @@ requirements:
     - {{ compiler('c') }}
     - {{ compiler('cxx') }}
     - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
-    - python                                 # [build_platform != target_platform]
+    - python {{ python }}                                 # [build_platform != target_platform]
     - cross-python_{{ target_platform }}     # [build_platform != target_platform]
-    - numpy                                  # [build_platform != target_platform]
+    - numpy {{ numpy }}                                 # [build_platform != target_platform]
     - unzip
     # Keep bazel listed twice here to help the migrators track dependencies
-    - bazel
-    - bazel >=5.1.1,<6
+    - bazel {{ bazel }}
     - bazel-toolchain
     # need protoc
-    - libprotobuf
+    - libprotobuf {{ libprotobuf }}
     # needs protoc-gen-grpc
-    - libgrpc
+    - grpc-cpp {{ grpc_cpp }}
     # needs flatc
-    - flatbuffers <2.0.6
+    - flatbuffers {{ flatbuffers }}
     # list libabseil here to ensure pinning correctly
-    - libabseil
+    - libabseil {{ abseil_cpp }}
   host:
-    - cudnn      # [cuda_compiler_version != "None"]
-    - nccl       # [cuda_compiler_version != "None"]
-    - python
+    - cudnn {{ cudnn }}      # [cuda_compiler_version != "None"]
+    - nccl {{ nccl }}       # [cuda_compiler_version != "None"]
+    - python {{ python }}
     - pip
-    - numpy
+    - numpy {{ numpy }}
     - wheel
     # list libabseil here to ensure pinning correctly
-    - libabseil
+    - libabseil {{ abseil_cpp }}
     - flatbuffers <2.0.6
-    - libgrpc
+    - grpc-cpp {{ grpc_cpp }}
     - openssl
-    - zlib
+    - zlib {{ zlib }}
   run:
     - python
     - {{ pin_compatible('numpy') }}
     - scipy >=1.5
+    - re2
+    - c-ares
     - ml_dtypes >=0.0.3
     - __cuda  # [cuda_compiler_version != "None"]
   run_constrained:
diff --git a/recipe/patches/0003-Patched-openxla-for-tf_runtime.patch b/recipe/patches/0003-Patched-openxla-for-tf_runtime.patch
new file mode 100644
index 0000000..e72979e
--- /dev/null
+++ b/recipe/patches/0003-Patched-openxla-for-tf_runtime.patch
@@ -0,0 +1,196 @@
+From 03aa78468acc523db8d3043af3b7ed121ed9a7c9 Mon Sep 17 00:00:00 2001
+From: Nishidha Panpaliya <npanpa23@in.ibm.com>
+Date: Tue, 18 Apr 2023 06:09:25 +0000
+Subject: [PATCH] Patched XLA for TF runtime
+
+---
+ WORKSPACE                                     |   4 +-
+ build/build.py                                |   1 +
+ build/build_wheel.py                          |   1 +
+ ...001-TF-runtime-patched-on-big-endian.patch | 130 ++++++++++++++++++
+ 4 files changed, 135 insertions(+), 1 deletion(-)
+ create mode 100644 third_party/xla/0001-TF-runtime-patched-on-big-endian.patch
+
+diff --git a/WORKSPACE b/WORKSPACE
+index baf0f76e5..5cbae9e2c 100644
+--- a/WORKSPACE
++++ b/WORKSPACE
+@@ -12,6 +12,8 @@ http_archive(
+     urls = [
+         "https://github.com/openxla/xla/archive/79ca8d03c296ede04dc9a86ce9dde79ed909dda8.tar.gz",
+     ],
++    patch_args = ["-p1"],
++    patches = ["//third_party:xla/0001-TF-runtime-patched-on-big-endian.patch"],
+ )
+ 
+ # For development, one often wants to make changes to the TF repository as well
+@@ -47,4 +49,4 @@ xla_workspace0()
+ 
+ 
+ load("//third_party/flatbuffers:workspace.bzl", flatbuffers = "repo")
+-flatbuffers()
+\ No newline at end of file
++flatbuffers()
+diff --git a/build/build.py b/build/build.py
+index 85e3c5e17..a3bbf0303 100755
+--- a/build/build.py
++++ b/build/build.py
+@@ -469,6 +469,7 @@ def main():
+       "darwin_arm64": "arm64",
+       "darwin_x86_64": "x86_64",
+       "ppc": "ppc64le",
++      "s390x": "s390x",
+       "aarch64": "aarch64",
+   }
+   # TODO(phawkins): support other bazel cpu overrides.
+diff --git a/build/build_wheel.py b/build/build_wheel.py
+index 421440321..8c26c7ee9 100644
+--- a/build/build_wheel.py
++++ b/build/build_wheel.py
+@@ -264,6 +264,7 @@ def build_wheel(sources_path, output_path, cpu):
+     ("Linux", "x86_64"): ("manylinux2014", "x86_64"),
+     ("Linux", "aarch64"): ("manylinux2014", "aarch64"),
+     ("Linux", "ppc64le"): ("manylinux2014", "ppc64le"),
++    ("Linux", "s390x"): ("manylinux2014", "s390x"),
+     ("Darwin", "x86_64"): ("macosx_10_14", "x86_64"),
+     ("Darwin", "arm64"): ("macosx_11_0", "arm64"),
+     ("Windows", "AMD64"): ("win", "amd64"),
+diff --git a/third_party/xla/0001-TF-runtime-patched-on-big-endian.patch b/third_party/xla/0001-TF-runtime-patched-on-big-endian.patch
+new file mode 100644
+index 000000000..2461a2ff4
+--- /dev/null
++++ b/third_party/xla/0001-TF-runtime-patched-on-big-endian.patch
+@@ -0,0 +1,130 @@
++From d3ffb36eaee7e1905a6a5d70e30d7d5269f8adc8 Mon Sep 17 00:00:00 2001
++From: Nishidha Panpaliya <npanpa23@in.ibm.com>
++Date: Tue, 18 Apr 2023 06:08:00 +0000
++Subject: [PATCH] TF runtime patched on big endian
++
++---
++ ...ble-asserts-for-little-endian-checks.patch | 85 +++++++++++++++++++
++ third_party/tf_runtime/workspace.bzl          |  2 +-
++ third_party/tsl/workspace3.bzl                |  2 +-
++ 3 files changed, 87 insertions(+), 2 deletions(-)
++ create mode 100644 third_party/tf_runtime/0001-Disable-asserts-for-little-endian-checks.patch
++
++diff --git a/third_party/tf_runtime/0001-Disable-asserts-for-little-endian-checks.patch b/third_party/tf_runtime/0001-Disable-asserts-for-little-endian-checks.patch
++new file mode 100644
++index 000000000..07b042e74
++--- /dev/null
+++++ b/third_party/tf_runtime/0001-Disable-asserts-for-little-endian-checks.patch
++@@ -0,0 +1,85 @@
+++From d3bb7c35e60e6cf619dd43435e4643fa059cc615 Mon Sep 17 00:00:00 2001
+++From: Nishidha Panpaliya <npanpa23@in.ibm.com>
+++Date: Fri, 14 Apr 2023 11:37:23 +0000
+++Subject: [PATCH] Disable asserts for little endian checks
+++
+++---
+++ include/tfrt/bef/bef_reader.h               | 2 +-
+++ include/tfrt/bef_converter/bef_emitter.h    | 2 +-
+++ include/tfrt/host_context/attribute_utils.h | 4 ++--
+++ lib/tensor/tensor_serialize_utils.cc        | 4 ++--
+++ 4 files changed, 6 insertions(+), 6 deletions(-)
+++
+++diff --git a/include/tfrt/bef/bef_reader.h b/include/tfrt/bef/bef_reader.h
+++index b0ff7ab5..20bc6e62 100644
+++--- a/include/tfrt/bef/bef_reader.h
++++++ b/include/tfrt/bef/bef_reader.h
+++@@ -146,7 +146,7 @@ class BEFKernel {
+++                                                    kKernelEntryAlignment) /
+++                                          kKernelEntryAlignment),
+++         body_start_(result_table_ + header_->num_results) {
+++-    ASSERT_LITTLE_ENDIAN();
++++    //ASSERT_LITTLE_ENDIAN();
+++   }
+++ 
+++   uint32_t kernel_code() const { return header_->kernel_code; }
+++diff --git a/include/tfrt/bef_converter/bef_emitter.h b/include/tfrt/bef_converter/bef_emitter.h
+++index 2aae7d44..154eda31 100644
+++--- a/include/tfrt/bef_converter/bef_emitter.h
++++++ b/include/tfrt/bef_converter/bef_emitter.h
+++@@ -59,7 +59,7 @@ class BefEmitter {
+++   // Emit a generic typed value: e.g., Emit<uint32_t>(val).
+++   template <typename T>
+++   void Emit(T value) {
+++-    ASSERT_LITTLE_ENDIAN();
++++    //ASSERT_LITTLE_ENDIAN();
+++     EmitAlignment(alignof(T));
+++     EmitBytes(llvm::ArrayRef(reinterpret_cast<uint8_t*>(&value), sizeof(T)));
+++   }
+++diff --git a/include/tfrt/host_context/attribute_utils.h b/include/tfrt/host_context/attribute_utils.h
+++index cbded469..b1074096 100644
+++--- a/include/tfrt/host_context/attribute_utils.h
++++++ b/include/tfrt/host_context/attribute_utils.h
+++@@ -52,7 +52,7 @@ class Attribute {
+++  public:
+++   explicit Attribute(const void* value)
+++       : value_(*reinterpret_cast<const T*>(value)) {
+++-    ASSERT_LITTLE_ENDIAN();
++++    //ASSERT_LITTLE_ENDIAN();
+++   }
+++ 
+++   const T& get() const { return value_; }
+++@@ -127,7 +127,7 @@ class CompilationUnitAttribute {
+++  public:
+++   explicit CompilationUnitAttribute(const void* value)
+++       : addr_(reinterpret_cast<intptr_t>(value)) {
+++-    ASSERT_LITTLE_ENDIAN();
++++    //ASSERT_LITTLE_ENDIAN();
+++     const auto* ptr = static_cast<const uint8_t*>(value);
+++ 
+++     ptr = ReadVbrInt(ptr, &id_);
+++diff --git a/lib/tensor/tensor_serialize_utils.cc b/lib/tensor/tensor_serialize_utils.cc
+++index ddaa7b1b..c585054e 100644
+++--- a/lib/tensor/tensor_serialize_utils.cc
++++++ b/lib/tensor/tensor_serialize_utils.cc
+++@@ -102,7 +102,7 @@ std::string SerializeTensorMetadata(const TensorMetadata& md) {
+++ 
+++ llvm::Expected<TensorMetadata> DeserializeTensorMetadataInternal(
+++     const char* pos, size_t size) {
+++-  ASSERT_LITTLE_ENDIAN();
++++  //ASSERT_LITTLE_ENDIAN();
+++   DType kind = static_cast<DType>(*reinterpret_cast<const uint64_t*>(pos));
+++   pos += sizeof(uint64_t);
+++   const int num_dimensions = size / 8 - 1;
+++@@ -119,7 +119,7 @@ llvm::Expected<TensorMetadata> DeserializeTensorMetadataInternal(
+++ 
+++ llvm::Expected<TensorMetadata> DeserializeTensorMetadata(
+++     string_view serialized) {
+++-  ASSERT_LITTLE_ENDIAN();
++++  //ASSERT_LITTLE_ENDIAN();
+++   return DeserializeTensorMetadataInternal(serialized.data(),
+++                                            serialized.size());
+++ }
+++-- 
+++2.34.1
+++
++diff --git a/third_party/tf_runtime/workspace.bzl b/third_party/tf_runtime/workspace.bzl
++index f61b4868f..84b57d37f 100644
++--- a/third_party/tf_runtime/workspace.bzl
+++++ b/third_party/tf_runtime/workspace.bzl
++@@ -16,5 +16,5 @@ def repo():
++         urls = tf_mirror_urls("https://github.com/tensorflow/runtime/archive/{commit}.tar.gz".format(commit = TFRT_COMMIT)),
++         # A patch file can be provided for atomic commits to both TF and TFRT.
++         # The job that bumps the TFRT_COMMIT also resets patch_file to 'None'.
++-        patch_file = None,
+++        patch_file = ["//third_party:tf_runtime/0001-Disable-asserts-for-little-endian-checks.patch"],
++     )
++diff --git a/third_party/tsl/workspace3.bzl b/third_party/tsl/workspace3.bzl
++index 41cfed2b2..20dd80302 100644
++--- a/third_party/tsl/workspace3.bzl
+++++ b/third_party/tsl/workspace3.bzl
++@@ -15,7 +15,7 @@ def workspace():
++         ],
++     )
++ 
++-    tf_runtime()
+++    #tf_runtime()
++ 
++     # https://github.com/bazelbuild/bazel-skylib/releases
++     http_archive(
++-- 
++2.34.1
++
+-- 
+2.34.1
+
-- 
2.34.1

