From f0f94e7348bcafe222ed0f21fa0e2178ae11d12c Mon Sep 17 00:00:00 2001
From: Deepali Chourasia <deepch23@in.ibm.com>
Date: Tue, 30 Aug 2022 08:30:32 +0000
Subject: [PATCH] update numba to 0.56 and build with numpy 1.23

---
 recipe/0001-changes-for-numpy-v1.23.patch | 201 ++++++++++++++++++++++
 recipe/meta.yaml                          |  20 +--
 2 files changed, 211 insertions(+), 10 deletions(-)
 create mode 100644 recipe/0001-changes-for-numpy-v1.23.patch

diff --git a/recipe/0001-changes-for-numpy-v1.23.patch b/recipe/0001-changes-for-numpy-v1.23.patch
new file mode 100644
index 0000000..b6256d4
--- /dev/null
+++ b/recipe/0001-changes-for-numpy-v1.23.patch
@@ -0,0 +1,201 @@
+From 589bc08e56deddf44ca18a8cdecdc8126a11031a Mon Sep 17 00:00:00 2001
+From: Deepali Chourasia <deepch23@in.ibm.com>
+Date: Wed, 24 Aug 2022 08:43:38 +0000
+Subject: [PATCH] changes for numpy v1.23
+
+---
+ numba/__init__.py                             |  2 +-
+ numba/cuda/cudadrv/devicearray.py             |  2 +-
+ numba/cuda/simulator/cudadrv/devicearray.py   |  2 +-
+ numba/cuda/tests/cudadrv/test_cuda_ndarray.py | 11 +++--
+ numba/np/arrayobj.py                          | 48 +++++++++++++++++++
+ numba/tests/test_array_methods.py             | 25 ++++++++--
+ setup.py                                      |  2 +-
+ 7 files changed, 81 insertions(+), 11 deletions(-)
+
+diff --git a/numba/__init__.py b/numba/__init__.py
+index 30f0ff45c..e375e1819 100644
+--- a/numba/__init__.py
++++ b/numba/__init__.py
+@@ -142,7 +142,7 @@ def _ensure_critical_deps():
+ 
+     if numpy_version < (1, 18):
+         raise ImportError("Numba needs NumPy 1.18 or greater")
+-    elif numpy_version > (1, 22):
++    elif numpy_version > (1, 24):
+         raise ImportError("Numba needs NumPy 1.22 or less")
+ 
+     try:
+diff --git a/numba/cuda/cudadrv/devicearray.py b/numba/cuda/cudadrv/devicearray.py
+index d12bfb381..651f06bf6 100644
+--- a/numba/cuda/cudadrv/devicearray.py
++++ b/numba/cuda/cudadrv/devicearray.py
+@@ -812,7 +812,7 @@ def array_core(ary):
+     a view without the repeated dimensions.
+ 
+     """
+-    if not ary.strides:
++    if not ary.strides or not ary.size:
+         return ary
+     core_index = []
+     for stride in ary.strides:
+diff --git a/numba/cuda/simulator/cudadrv/devicearray.py b/numba/cuda/simulator/cudadrv/devicearray.py
+index 12c68df94..0b988a6d4 100644
+--- a/numba/cuda/simulator/cudadrv/devicearray.py
++++ b/numba/cuda/simulator/cudadrv/devicearray.py
+@@ -233,7 +233,7 @@ def array_core(ary):
+     a view without the repeated dimensions.
+ 
+     """
+-    if not ary.strides:
++    if not ary.strides or not ary.size:
+         return ary
+     core_index = []
+     for stride in ary.strides:
+diff --git a/numba/cuda/tests/cudadrv/test_cuda_ndarray.py b/numba/cuda/tests/cudadrv/test_cuda_ndarray.py
+index 08e1b8f47..14be06494 100644
+--- a/numba/cuda/tests/cudadrv/test_cuda_ndarray.py
++++ b/numba/cuda/tests/cudadrv/test_cuda_ndarray.py
+@@ -172,10 +172,13 @@ class TestCudaNDArray(CUDATestCase):
+         array = cuda.to_device(original)[:, ::2]
+         with self.assertRaises(ValueError) as e:
+             array.view("i4")
+-        self.assertEqual(
+-            "To change to a dtype of a different size,"
+-            " the array must be C-contiguous",
+-            str(e.exception))
++        msg = str(e.exception)
++        self.assertIn('To change to a dtype of a different size,', msg)
++
++        contiguous_pre_np123 = 'the array must be C-contiguous' in msg
++        contiguous_post_np123 = 'the last axis must be contiguous' in msg
++        self.assertTrue(contiguous_pre_np123 or contiguous_post_np123,
++                        'Expected message to mention contiguity')
+ 
+     def test_devicearray_view_bad_itemsize(self):
+         original = np.array(np.arange(12), dtype="i2").reshape(4, 3)
+diff --git a/numba/np/arrayobj.py b/numba/np/arrayobj.py
+index 7be350ba0..efd65b976 100644
+--- a/numba/np/arrayobj.py
++++ b/numba/np/arrayobj.py
+@@ -266,6 +266,36 @@ def update_array_info(aryty, array):
+                                           get_itemsize(context, aryty))
+ 
+ 
++@intrinsic
++def _intrin_get_itemsize(tyctx, dtype):
++    """Computes the itemsize of the dtype"""
++    sig = types.intp(dtype)
++
++    def codegen(cgctx, builder, sig, llargs):
++        llty = cgctx.get_data_type(sig.args[0].dtype)
++        llintp = cgctx.get_data_type(sig.return_type)
++        return llintp(cgctx.get_abi_sizeof(llty))
++    return sig, codegen
++
++
++def _compatible_view(a, dtype):
++    pass
++
++@overload(_compatible_view)
++def ol_compatible_view(a, dtype):
++    """Determines if the array and dtype are compatible for forming a view."""
++    # NOTE: NumPy 1.23+ uses this check
++    def impl(a, dtype):
++        flag_f = a.flags.f_contiguous
++        flag_c = a.flags.c_contiguous
++        # if just F ordered
++        if flag_f and not flag_c:
++            dtype_size = _intrin_get_itemsize(dtype)
++            if a.itemsize != dtype_size:
++                return False
++        return True
++    return impl
++
+ @lower_builtin('getiter', types.Buffer)
+ def getiter_array(context, builder, sig, args):
+     [arrayty] = sig.args
+@@ -2428,6 +2458,24 @@ def array_view(context, builder, sig, args):
+         msg = "new type not compatible with array"
+         context.call_conv.return_user_exc(builder, ValueError, (msg,))
+ 
++    if numpy_version >= (1, 23):
++        # NumPy 1.23+ bans views using a dtype that is a different size to that
++        # of the array when the last axis is not contiguous. For example, this
++        # manifests at runtime when a dtype size altering view is requested
++        # on a Fortran ordered array.
++
++        tyctx = context.typing_context
++        fnty = tyctx.resolve_value_type(_compatible_view)
++        _compatible_view_sig = fnty.get_call_type(tyctx, (*sig.args,), {})
++        impl = context.get_function(fnty, _compatible_view_sig)
++        is_compatible_result = impl(builder, args)
++        is_compatible_pred = builder.icmp_unsigned('==', is_compatible_result,
++                                                   is_compatible_result.type(0))
++        with builder.if_then(is_compatible_pred):
++            msg = ("To change to a dtype of a different size, the last axis "
++                   "must be contiguous")
++            context.call_conv.return_user_exc(builder, ValueError, (msg,))
++
+     res = ret._getvalue()
+     return impl_ret_borrowed(context, builder, sig.return_type, res)
+ 
+diff --git a/numba/tests/test_array_methods.py b/numba/tests/test_array_methods.py
+index d75bb83ca..b24aec241 100644
+--- a/numba/tests/test_array_methods.py
++++ b/numba/tests/test_array_methods.py
+@@ -384,6 +384,18 @@ class TestArrayMethods(MemoryLeakMixin, TestCase):
+             self.assertEqual(str(raises.exception),
+                              "new type not compatible with array")
+ 
++        def check_err_noncontig_last_axis(arr, dtype):
++            # check NumPy interpreted version raises
++            msg = ("To change to a dtype of a different size, the last axis "
++                   "must be contiguous")
++            with self.assertRaises(ValueError) as raises:
++                make_array_view(dtype)(arr)
++            self.assertEqual(str(raises.exception), msg)
++            # check Numba version raises
++            with self.assertRaises(ValueError) as raises:
++                run(arr, dtype)
++            self.assertEqual(str(raises.exception), msg)
++
+         dt1 = np.dtype([('a', np.int8), ('b', np.int8)])
+         dt2 = np.dtype([('u', np.int16), ('v', np.int8)])
+         dt3 = np.dtype([('x', np.int16), ('y', np.int16)])
+@@ -402,9 +414,16 @@ class TestArrayMethods(MemoryLeakMixin, TestCase):
+         # Last dimension must have a compatible size
+         arr = arr.reshape((3, 8))
+         check(arr, np.int8)
+-        check(arr, np.float32)
+-        check(arr, np.complex64)
+-        check(arr, dt1)
++        # NumPy 1.23 does not allow views with different size dtype for
++        # non-contiguous last axis.
++        if numpy_version >= (1, 23):
++            check_err_noncontig_last_axis(arr, np.float32)
++            check_err_noncontig_last_axis(arr, np.complex64)
++            check_err_noncontig_last_axis(arr, dt1)
++        else:
++            check(arr, np.float32)
++            check(arr, np.complex64)
++            check(arr, dt1)
+         check_err(arr, dt2)
+         check_err(arr, np.complex128)
+ 
+diff --git a/setup.py b/setup.py
+index 19766b8a2..2e612968d 100644
+--- a/setup.py
++++ b/setup.py
+@@ -23,7 +23,7 @@ min_python_version = "3.7"
+ max_python_version = "3.11"  # exclusive
+ min_numpy_build_version = "1.11"
+ min_numpy_run_version = "1.18"
+-max_numpy_run_version = "1.23"
++max_numpy_run_version = "1.24"
+ min_llvmlite_version = "0.39.0dev0"
+ max_llvmlite_version = "0.40"
+ 
+-- 
+2.34.1
+
diff --git a/recipe/meta.yaml b/recipe/meta.yaml
index b051462..c91adbc 100644
--- a/recipe/meta.yaml
+++ b/recipe/meta.yaml
@@ -1,6 +1,6 @@
 {% set name = "numba" %}
-{% set version = "0.55.1" %}
-{% set sha256 = "542a9b514031f6afae971b627930fcaec057cdb604d54db7cbddfb050c580fb9" %}
+{% set version = "0.56.0" %}
+{% set sha256 = "58653ee67ecf198ae82ff1c30f4313d5c5ee931ddd8429badf11ed2b9c149110" %}
 
 package:
   name: numba
@@ -11,7 +11,7 @@ source:
   url: https://github.com/numba/{{ name }}/archive/{{ version }}.tar.gz
   sha256: {{ sha256 }}
   patches:
-    - patch-parfor.patch
+    - 0001-changes-for-numpy-v1.23.patch
 
 build:
   number: 0
@@ -41,14 +41,14 @@ requirements:
     - pip
     - setuptools
     - wheel
-    - llvmlite 0.38.*
-    - numpy
+    - llvmlite 0.39.*
+    - numpy {{ numpy }}
     - tbb-devel 2021.*
     - _openmp_mutex            # [linux and not ppc64le]
   run:
     - python
-    - {{ pin_compatible('llvmlite', max_pin='x.x') }}
-    - {{ pin_compatible('numpy') }}
+    - llvmlite 0.39.*
+    - numpy {{ numpy }}
     # needed for pkg_resources
     - setuptools
 
@@ -60,16 +60,16 @@ requirements:
     - cudatoolkit >=9.2   # [x86 and not osx]
     - cudatoolkit >=9.0   # [x86 and osx]
     # scipy 1.0 or later
-    - scipy >=1.0
+    - scipy {{ scipy }}
     # numpy has a hard upper limit currently
-    - numpy >=1.18,<1.22
+    - numpy {{ numpy }}
 
 test:
   requires:
     # Required to test optional Numba features
     - jinja2
     - cffi
-    - scipy
+    - scipy {{ scipy }}
     - ipython
     - setuptools
     - pip
-- 
2.34.1

