From 3fe28363d5dfa39dee96f00aa89d1cac177232c7 Mon Sep 17 00:00:00 2001
From: Aman Surkar <Aman.Surkar@ibm.com>
Date: Mon, 2 Sep 2024 08:55:59 +0000
Subject: [PATCH] Fix CVE-2024-24762

---
 recipe/0001-Fix-CVE-2024-24762.patch | 93 ++++++++++++++++++++++++++++
 recipe/meta.yaml                     |  2 +
 2 files changed, 95 insertions(+)
 create mode 100644 recipe/0001-Fix-CVE-2024-24762.patch

diff --git a/recipe/0001-Fix-CVE-2024-24762.patch b/recipe/0001-Fix-CVE-2024-24762.patch
new file mode 100644
index 0000000..a92d5ae
--- /dev/null
+++ b/recipe/0001-Fix-CVE-2024-24762.patch
@@ -0,0 +1,93 @@
+From 062dde23b0daae8ff1f74d2c74cc84afc6a56d7b Mon Sep 17 00:00:00 2001
+From: Archana-Shinde1 <Archana-Shinde1@ibm.com>
+Date: Tue, 21 May 2024 08:15:07 +0000
+Subject: [PATCH] Fix CVE-2024-24762
+
+---
+ multipart/multipart.py | 48 ++++++++++++++++++++++--------------------
+ 1 file changed, 25 insertions(+), 23 deletions(-)
+
+diff --git a/multipart/multipart.py b/multipart/multipart.py
+index 27aaecb..fe067d9 100644
+--- a/multipart/multipart.py
++++ b/multipart/multipart.py
+@@ -22,6 +22,8 @@ import logging
+ import tempfile
+ from io import BytesIO
+ from numbers import Number
++from email.message import Message
++from typing import Dict, Union, Tuple
+ 
+ # Unique missing object.
+ _missing = object()
+@@ -94,44 +96,44 @@ OPTION_RE = re.compile(OPTION_RE_STR)
+ QUOTE = b'"'[0]
+ 
+ 
+-def parse_options_header(value):
++def parse_options_header(value: Union[str, bytes]) -> Tuple[bytes, Dict[bytes, bytes]]:
+     """
+     Parses a Content-Type header into a value in the following format:
+         (content_type, {parameters})
+     """
++    # Uses email.message.Message to parse the header as described in PEP 594.
++    # Ref: https://peps.python.org/pep-0594/#cgi
+     if not value:
+         return (b'', {})
+ 
+-    # If we are passed a string, we assume that it conforms to WSGI and does
+-    # not contain any code point that's not in latin-1.
+-    if isinstance(value, text_type):            # pragma: no cover
+-        value = value.encode('latin-1')
++    # If we are passed bytes, we assume that it conforms to WSGI, encoding in latin-1.
++    if isinstance(value, bytes):  # pragma: no cover
++        value = value.decode('latin-1')
+ 
++    # For types
++    assert isinstance(value, str), 'Value should be a string by now'
+     # If we have no options, return the string as-is.
+-    if b';' not in value:
+-        return (value.lower().strip(), {})
++    if ";" not in value:
++        return (value.lower().strip().encode('latin-1'), {})
+ 
+     # Split at the first semicolon, to get our value and then options.
+-    ctype, rest = value.split(b';', 1)
++    # ctype, rest = value.split(b';', 1)
++    message = Message()
++    message['content-type'] = value
++    params = message.get_params()
++    # If there were no parameters, this would have already returned above
++    assert params, 'At least the content type value should be present'
++    ctype = params.pop(0)[0].encode('latin-1')
+     options = {}
+-
+-    # Parse the options.
+-    for match in OPTION_RE.finditer(rest):
+-        key = match.group(1).lower()
+-        value = match.group(2)
+-        if value[0] == QUOTE and value[-1] == QUOTE:
+-            # Unquote the value.
+-            value = value[1:-1]
+-            value = value.replace(b'\\\\', b'\\').replace(b'\\"', b'"')
++    for param in params:
++        key, value = param
+ 
+         # If the value is a filename, we need to fix a bug on IE6 that sends
+         # the full file path instead of the filename.
+-        if key == b'filename':
+-            if value[1:3] == b':\\' or value[:2] == b'\\\\':
+-                value = value.split(b'\\')[-1]
+-
+-        options[key] = value
+-
++        if key == 'filename':
++            if value[1:3] == ':\\' or value[:2] == '\\\\':
++                value = value.split('\\')[-1]
++        options[key.encode('latin-1')] = value.encode('latin-1')
+     return ctype, options
+ 
+ 
+-- 
+2.40.1
+
diff --git a/recipe/meta.yaml b/recipe/meta.yaml
index 681cc03..9e28f3d 100644
--- a/recipe/meta.yaml
+++ b/recipe/meta.yaml
@@ -8,6 +8,8 @@ package:
 source:
   url: https://pypi.io/packages/source/{{ name[0] }}/python_multipart/python_multipart-{{ version }}.tar.gz
   sha256: 288a6c39b06596c1b988bb6794c6fbc80e6c369e35e5062637df256bee0c9af9
+  patches:
+    - 0001-Fix-CVE-2024-24762.patch
 
 build:
   noarch: python
-- 
2.40.1

